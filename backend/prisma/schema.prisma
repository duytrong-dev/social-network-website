generator client {
    provider = "prisma-client-js"
    output   = "../generated/prisma"
}  

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

// B·∫£ng 1
model Users {
    id        Int          @id @default(autoincrement())
    email     String       @unique
    password  String
    name      String
    birthDate DateTime?    // ng√†y sinh
    gender    String?      // gi·ªõi t√≠nh
    phone     String?      // s·ªë ƒëi·ªán thoai
    avatarUrl String?      // ·∫£nh ƒë·∫°i di·ªán
    coverUrl  String?      // ·∫£nh b√¨a
    nickname  String?      // t√™n g·ªçi kh√°c
    bio       String?
    createdAt DateTime     @default(now())
    updatedAt DateTime     @updatedAt
  
    addresses        Addresses[]             // ƒë·ªãa ch·ªâ c·ªßa ng∆∞·ªùi d√πng
    educations       Educations[]           // th√¥ng tin h·ªçc v·∫•n
    roles            User_Roles[]            // m·ªëi quan h·ªá v·ªõi Roles
    posts            Posts[]                // b√†i vi·∫øt c·ªßa ng∆∞·ªùi d√πng
    reactions        Reactions[]            // b√†i vi·∫øt m√† ng∆∞·ªùi d√πng th√≠ch
    comments         Comments[]             // b√¨nh lu·∫≠n c·ªßa ng∆∞·ªùi d√πng
    commentReactions Comment_Reactions[]     // c·∫£m x√∫c c·ªßa ng∆∞·ªùi d√πng tr√™n b√¨nh lu·∫≠n
    shares           Shares[]               // b√†i vi·∫øt m√† ng∆∞·ªùi d√πng ƒë√£ chia s·∫ª
    chatParticipants Chat_Participants[]     // ng∆∞·ªùi d√πng tham gia c√°c ph√≤ng chat

    sentRequests     Friend_Requests[] @relation("SentRequests")        // y√™u c·∫ßu k·∫øt b·∫°n ƒë√£ g·ª≠i
    receivedRequests Friend_Requests[] @relation("ReceivedRequests")    // y√™u c·∫ßu k·∫øt b·∫°n ƒë√£ nh·∫≠n
    friendships1     Friendships[]   @relation("User1")                // m·ªëi quan h·ªá k·∫øt b·∫°n v·ªõi ng∆∞·ªùi d√πng kh√°c (User1)
    friendships2     Friendships[]   @relation("User2")                // m·ªëi quan h·ªá k·∫øt b·∫°n v·ªõi ng∆∞·ªùi d√πng kh√°c (User2)
    blockedUsers     Blocks[]                                          // ng∆∞·ªùi d√πng b·ªã ch·∫∑n b·ªüi ng∆∞·ªùi d√πng n√†y
    blockedBy        Blocks[]        @relation("BlockedBy")            // ng∆∞·ªùi d√πng ƒë√£ ch·∫∑n ng∆∞·ªùi d√πng n√†y
    messagesSent     Messages[]      @relation("MessagesSent")         // tin nh·∫Øn ƒë√£ g·ª≠i
    notifications    Notifications[]                                   // th√¥ng b√°o c·ªßa ng∆∞·ªùi d√πng
}

// B·∫£ng 2
model Addresses {
    id        Int      @id @default(autoincrement())
    userId    Int
    street    String?  // ƒë∆∞·ªùng ph·ªë
    city      String?  // th√†nh ph·ªë
    state     String?  // bang/t·ªânh
    country   String?  // qu·ªëc gia
    zipCode   String?  // m√£ b∆∞u ƒëi·ªán
    isCurrent Boolean @default(false) // ƒë·ªãa ch·ªâ hi·ªán t·∫°i hay kh√¥ng
    createdAt DateTime @default(now())
  
    user      Users    @relation(fields: [userId], references: [id], onDelete: Cascade) // li√™n k·∫øt v·ªõi b·∫£ng Users
}

// B·∫£ng 3
model Educations {
    id         Int      @id @default(autoincrement())
    userId     Int
    school     String
    degree     String? // b·∫±ng c·∫•p
    field      String? // lƒ©nh v·ª±c h·ªçc
    startDate  DateTime
    endDate    DateTime?
    isCurrent  Boolean @default(false) // hi·ªán t·∫°i hay kh√¥ng
  
    user       Users    @relation(fields: [userId], references: [id], onDelete: Cascade) // li√™n k·∫øt v·ªõi b·∫£ng Users
}

// B·∫£ng 4
model Roles {
    id          Int               @id @default(autoincrement())
    name        String            @unique
    createdAt   DateTime          @default(now())
    users       User_Roles[]
    permissions Role_Permissions[]
}

// B·∫£ng 5
model Permissions {
    id          Int               @id @default(autoincrement())
    name        String            @unique
    url         String?           // URL li√™n k·∫øt ƒë·∫øn quy·ªÅn n√†y
    method      Http_Method?       // Ph∆∞∆°ng th·ª©c HTTP (GET, POST, PUT, DELETE, v.v.)
    action      String?           // H√†nh ƒë·ªông m√¥ t·∫£ quy·ªÅn n√†y
    createdAt   DateTime          @default(now())
  
    roles       Role_Permissions[]
}

// Enum cho c√°c ph∆∞∆°ng th·ª©c HTTP
enum Http_Method {
  GET
  POST
  PUT
  DELETE
  PATCH
}

// B·∫£ng 6
model User_Roles {
    userId Int
    roleId Int
  
    user   Users @relation(fields: [userId], references: [id], onDelete: Cascade)
    role   Roles @relation(fields: [roleId], references: [id], onDelete: Cascade)
  
    @@id([userId, roleId])
}

// B·∫£ng 7
model Role_Permissions {
    roleId       Int
    permissionId Int
  
    role         Roles       @relation(fields: [roleId], references: [id], onDelete: Cascade)
    permission   Permissions @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  
    @@id([roleId, permissionId])
}

// B·∫£ng 8
model Posts {
    id          Int       @id @default(autoincrement())
    content     String?
    authorId    Int
    visibility  Post_Visibility  @default(PUBLIC) // quy·ªÅn ri√™ng t∆∞ c·ªßa b√†i vi·∫øt
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
  
    author    Users      @relation(fields: [authorId], references: [id], onDelete: Cascade) // li√™n k·∫øt v·ªõi b·∫£ng Users
    media     Post_Media[]
    reactions Reactions[]
    comments  Comments[]
    shares    Shares[]
}

// Enum cho quy·ªÅn ri√™ng t∆∞ c·ªßa b√†i vi·∫øt
enum Post_Visibility {
    ONLY_ME     // ch·ªâ m√¨nh t√¥i
    FRIENDS     // b·∫°n b√®
    PUBLIC      // c√¥ng khai
}

// B·∫£ng 9
model Post_Media {
    id        Int       @id @default(autoincrement())
    postId    Int
    url       String
    type      Media_Type // lo·∫°i ph∆∞∆°ng ti·ªán (·∫£nh, video, v.v.)
    caption   String?  // ch√∫ th√≠ch cho ph∆∞∆°ng ti·ªán
    createdAt DateTime  @default(now())
  
    post      Posts     @relation(fields: [postId], references: [id], onDelete: Cascade) // li√™n k·∫øt v·ªõi b·∫£ng Posts
}

// Enum cho lo·∫°i ph∆∞∆°ng ti·ªán
enum Media_Type {
    IMAGE
    VIDEO
}

// B·∫£ng 10
model Reactions {
    id        Int     @id @default(autoincrement())
    userId    Int
    postId    Int
    type      Reaction_Type @default(LIKE) // ki·ªÉu c·∫£m x√∫c
    createdAt DateTime @default(now())

    user    Users    @relation(fields: [userId], references: [id], onDelete: Cascade) // li√™n k·∫øt v·ªõi b·∫£ng Users
    post    Posts    @relation(fields: [postId], references: [id], onDelete: Cascade) // li√™n k·∫øt v·ªõi b·∫£ng Posts
  
    @@unique([userId, postId])
}

// Enum cho c√°c lo·∫°i c·∫£m x√∫c
enum Reaction_Type {
    LIKE     // üëç
    LOVE     // ‚ù§Ô∏è
    HAHA     // üòÜ
    WOW      // üòÆ
    SAD      // üò¢
    ANGRY    // üò°
}

// B·∫£ng 11
model Comments {
    id        Int       @id @default(autoincrement())
    content   String
    authorId  Int
    postId    Int
    parentId  Int? // ID c·ªßa b√¨nh lu·∫≠n cha, n·∫øu c√≥
    isEdited  Boolean   @default(false)
    createdAt DateTime  @default(now())
  
    author     Users      @relation(fields: [authorId], references: [id], onDelete: Cascade) // li√™n k·∫øt v·ªõi b·∫£ng Users
    post       Posts      @relation(fields: [postId], references: [id], onDelete: Cascade) // li√™n k·∫øt v·ªõi b·∫£ng Posts
    parent     Comments?  @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade) // b√¨nh lu·∫≠n cha n·∫øu c√≥
    replies    Comments[] @relation("CommentReplies") // c√°c reply c·ªßa comment n√†y
    reactions  Comment_Reactions[]              // c·∫£m x√∫c c·ªßa comment
}

// B·∫£ng 12
model Comment_Reactions {
    id         Int            @id @default(autoincrement())
    userId     Int
    commentId  Int
    type       Reaction_Type   @default(LIKE)
    createdAt  DateTime       @default(now())
  
    user       Users     @relation(fields: [userId], references: [id], onDelete: Cascade) // li√™n k·∫øt v·ªõi b·∫£ng Users
    comment    Comments  @relation(fields: [commentId], references: [id], onDelete: Cascade) // li√™n k·∫øt v·ªõi b·∫£ng Comments
  
    @@unique([userId, commentId]) // m·ªói user ch·ªâ c√≥ 1 c·∫£m x√∫c tr√™n m·ªói comment
}

// B·∫£ng 13
model Shares {
    id        Int      @id @default(autoincrement())
    userId    Int
    postId    Int
    sharedAt  DateTime @default(now())
  
    user      Users     @relation(fields: [userId], references: [id], onDelete: Cascade) // li√™n k·∫øt v·ªõi b·∫£ng Users
    post      Posts     @relation(fields: [postId], references: [id])
}

// B·∫£ng 14
model Friend_Requests {
    id         Int      @id @default(autoincrement())
    senderId   Int
    receiverId Int
    status     Friend_Request_Status @default(PENDING)
    createdAt  DateTime @default(now())
  
    sender     Users @relation("SentRequests", fields: [senderId], references: [id], onDelete: Cascade)
    receiver   Users @relation("ReceivedRequests", fields: [receiverId], references: [id], onDelete: Cascade)
}

// Enum cho tr·∫°ng th√°i y√™u c·∫ßu k·∫øt b·∫°n
enum Friend_Request_Status {
    PENDING
    ACCEPTED
    REJECTED
}

// B·∫£ng 15
model Friendships {
    id       Int   @id @default(autoincrement())
    user1Id  Int
    user2Id  Int
    createdAt DateTime @default(now())
  
    user1   Users  @relation("User1", fields: [user1Id], references: [id], onDelete: Cascade)
    user2   Users  @relation("User2", fields: [user2Id], references: [id], onDelete: Cascade)
  
    @@unique([user1Id, user2Id])
} // sau khi 2 ng∆∞·ªùi d√πng ch·∫•p nh·∫≠n y√™u c·∫ßu k·∫øt b·∫°n, s·∫Ω t·∫°o ra m·ªôt b·∫£n ghi trong b·∫£ng n√†y

// B·∫£ng 16
model Blocks {
    id        Int   @id @default(autoincrement())
    blockerId Int
    blockedId Int
  
    blocker   Users @relation(fields: [blockerId], references: [id], onDelete: Cascade)
    blocked   Users @relation("BlockedBy", fields: [blockedId], references: [id], onDelete: Cascade)
  
    @@unique([blockerId, blockedId])
}

// B·∫£ng 17
model Chat_Rooms {
    id          Int        @id @default(autoincrement())
    name        String?    // T√™n nh√≥m chat (c√≥ th·ªÉ null n·∫øu l√† chat 1-1)
    isGroup     Boolean    @default(false)
    createdAt   DateTime   @default(now())
  
    participants Chat_Participants[]
    messages     Messages[]
}

// B·∫£ng 18
model Chat_Participants {
    id         Int      @id @default(autoincrement())
    chatRoomId Int
    userId     Int
    joinedAt   DateTime @default(now())
  
    chatRoom  Chat_Rooms @relation(fields: [chatRoomId], references: [id], onDelete: Cascade) // li√™n k·∫øt v·ªõi b·∫£ng ChatRooms
    user      Users     @relation(fields: [userId], references: [id]) // li√™n k·∫øt v·ªõi b·∫£ng Users
  
    @@unique([chatRoomId, userId]) // 1 ng∆∞·ªùi ch·ªâ tham gia 1 l·∫ßn trong nh√≥m
}

// B·∫£ng 19
model Messages {
    id         Int      @id @default(autoincrement())
    senderId   Int
    chatRoomId Int
    content    String
    isRead     Boolean  @default(false)
    isEdited   Boolean  @default(false)
    sentAt     DateTime @default(now())
  
    sender     Users @relation("MessagesSent", fields: [senderId], references: [id], onDelete: Cascade) // li√™n k·∫øt v·ªõi b·∫£ng Users
    chatRoom   Chat_Rooms @relation(fields: [chatRoomId], references: [id], onDelete: Cascade) // li√™n k·∫øt v·ªõi b·∫£ng ChatRooms
}

// B·∫£ng 20
model Notifications {
  id         Int      @id @default(autoincrement())
  userId     Int
  content    String
  isRead     Boolean  @default(false)
  type       Notification_Type
  referenceId Int?      // ID c·ªßa b√†i post/comment/... li√™n quan
  createdAt  DateTime @default(now())

  user       Users     @relation(fields: [userId], references: [id], onDelete: Cascade) // li√™n k·∫øt v·ªõi b·∫£ng Users
}

// Enum cho c√°c lo·∫°i th√¥ng b√°o
enum Notification_Type {
  LIKE
  COMMENT
  FRIEND_REQUEST
  MESSAGE
  PAGE_POST
  SYSTEM
}
